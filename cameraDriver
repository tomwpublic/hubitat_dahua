/*

Copyright 2022 - tomw

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-------------------------------------------

Change history:

0.9.1 - tomw - Removed duplicate motion events.  Connection reliability improvements.
0.9.0 - tomw - Initial release

*/

metadata
{
    definition(name: "Dahua/Amcrest Camera", namespace: "tomw", author: "tomw", importUrl: "")
    {
        capability "ImageCapture"
        capability "Initialize"
        capability "MotionSensor"
        
        command "closeStream"
        
        command "clearImages"
        attribute "displayImage", "string"
        
        attribute "crossLineDetected", "string"
        attribute "crossRegionDetected", "string"
        attribute "smartDetectType", "string"
    }
}

preferences
{
    section
    {
        input "ipAddress", "text", title: "IP address", required: true
        input "port", "text", title: "port", defaultValue: "80", required: true
        input name: "logEnable", type: "bool", title: "Enable debug logging", defaultValue: true
    }
    section
    {
        input "username", "text", title: "Username", required: true
        input "password", "password", title: "Password", required: true
    }
}

def logDebug(msg) 
{
    if (logEnable)
    {
        log.debug(msg)
    }
}

def initialize()
{
    try
    {
        unschedule()
        closeStream()
        
        def devInfo = queryDeviceInfo()
        if(null == devInfo) { throw new Exception("failed to connect") }        
        setDevInfo(devInfo)
        
        runIn(2, openStream)
        runIn(30, causeEventHeartbeat)
    }
    catch (Exception e)
    {
        logDebug("initialize() failed: ${e.message}")
        
        reinitialize()
    }
}

def updated()
{
    initialize()
}

def setupDevDetails(devDetails)
{
    if(!devDetails) { return }
    
    device.updateSetting("ipAddress", devDetails.ipAddress)    
}

def take(channel = "1")
{
    try
    {
        def stream = doCommand("/snapshot.cgi?channel=" + channel)?.data
        
        if(stream)
        {
            def bSize = stream.available()
            byte[] imageArr = new byte[bSize]
            stream.read(imageArr, 0, bSize)
            def image = hubitat.helper.HexUtils.byteArrayToHexString(imageArr)
            
            sendEvent(name: "image", value: image)
            
            def encodedImage = imageArr.encodeBase64().toString()
            def displayImage = '<img src="data:image/jpeg;base64,' + encodedImage + '">'
            
            sendEvent(name: "displayImage", value: displayImage)
        }
    }
    catch (Exception e)
    {
        log.debug "take() failed: ${e.message}"
    }
}

def clearImages()
{
    sendEvent(name: "image", value: "n/a")
    sendEvent(name: "displayImage", value: "n/a")   
}

def clearAuthMap()
{
    state.remove("authMap")
}

def setAuthMap(Map authMap)
{
    state.authMap = authMap
}

def getAuthMap()
{
    return state.authMap
}

def fetchAuthHeader()
{
    def targetUri = genBaseUri() + "/magicBox.cgi?action=getMachineName"
    def authMap = [:]
    
    try
    {
        def params = 
            [ 
                uri: targetUri,
                headers:
                [ Authorization: "Basic " + ("${username}:${password}").bytes.encodeBase64().toString() ]
            ]
        
        _command(params)
        // we expect a 401 here to seed the digest handshake
    }
    catch(groovyx.net.http.HttpResponseException e)
    {
        def resp = e.getResponse()        
        if(resp?.status?.toInteger() == 401)
        {
            authMap = parseAuthHeader(resp?.headers?.'www-authenticate')      
        }
    }
    catch(Exception e)
    {
        log.error "fetchAuthHeader() failed: ${e}"
    }
    finally
    {
        setAuthMap(authMap)
        return authMap
    }    
}

def _command(params)
{
    // inner command, assuming token is valid
    return httpExec("GET", params)
}

def doCommand(suffix)
{
    return _command(genParamsFull(suffix))
}

def deviceQuery(suffix)
{
    def respData = doCommand(suffix)?.data
    return strReaderToString(respData)
}

def setDevInfo(devInfo)
{
    state.devInfo = devInfo
    
    def alias = devInfo?.machineName + " Camera"
    //device.setLabel(alias)
    //device.setName(alias)
}

def getDevInfo()
{
    return state.devInfo
}

def queryDeviceInfo()
{
    try
    {
        def machineName = deviceQuery("/magicBox.cgi?action=getMachineName")?.split("=")?.getAt(1)
        def serialNo = deviceQuery("/magicBox.cgi?action=getSerialNo")?.split("=")?.getAt(1)
        def deviceType = deviceQuery("/magicBox.cgi?action=getDeviceType")?.split("=")?.getAt(1)
        
        def devInfo = [machineName: machineName, serialNo: serialNo, deviceType: deviceType]
        //logDebug(devInfo)
        
        return devInfo
    }
    catch(Exception e)
    {
        log.error "queryDeviceInfo() failed: ${e}"
    }
}

def openStream()
{
    // references:
    //https://github.com/tchellomello/python-amcrest/issues/137#issuecomment-677930804
    //https://github.com/dchesterton/amcrest2mqtt/blob/main/src/amcrest2mqtt.py#L429
    //https://github.com/GeorgeIoak/Amcrest_AD110_Button/blob/main/camera-events.py#L107
    //https://github.com/tchellomello/python-amcrest/issues/151#issuecomment-1057483008
    //https://github.com/rroller/dahua/blob/main/custom_components/dahua/__init__.py#L343

    def eventNames = "All"
    def suffix = fixupUrl("/eventManager.cgi?action=attach&codes=[${eventNames}]")
    
    fetchAuthHeader()
    
    def params = genParamsHeaders(suffix)
    if(params == null) { return }
    
    params.rawData = true
    params.pingInterval = 1
    
    logDebug("openStream() params = ${params}")
    
    clearEvent()
    
    def targetUri = genBaseUri() + suffix    
    interfaces.eventStream.connect(targetUri, params)
}

def causeEventHeartbeat()
{
    try
    {
        unschedule(causeEventHeartbeat)
        // This seems to elicit an "InterVideoAccess" response on the AD110, which
        //   is sufficient as a heartbeat to keep the EventStream from timing out every 60s.
        
        // May need to verify that this same behavior is present on other cameras.
        logDebug("heartbeat: ${strReaderToString(doCommand("/global.cgi?action=getCurrentTime").data)}")
        
        runIn(30, causeEventHeartbeat)
    }
    catch(Exception e)
    {
        // swallow errors
    }
}

def parse(String message)
{
    //logDebug("parse: ${message}")
    
    if(message.toLowerCase()?.contains("myboundary"))
    {
        event = getEvent()
        //logDebug("event complete:\r\n ${event}")
        
        if(event?.toLowerCase()?.contains("code"))
        {
            //logDebug("parse: ${message}")
            processCodeMessage("Code=" + event.split("Code=")[1])
        }
        
        clearEvent()
    }
    else
    {
        addEventLine(message)
    }
}

def addEventLine(line)
{
    def event = getEvent()
    if(null == event) { clearEvent() }
    
    event += line

    setVolatileState("event", event)
}
       
def getEvent()
{
    return getVolatileState("event")
}

def clearEvent()
{
    setVolatileState("event", "")
}

def processCodeMessage(message)
{
    message = message.split(";")
    def slurper = new groovy.json.JsonSlurper()
    
    def codeMap = [:]
    def member

    message.each
    {
        try
        {
            member = it.split('data(:|=)', 2)
            if(member.size() == 2)
            {
                // some firmware versions report as "data:" and some "data=",
                //   ...so, support both
                member = it.split('(:|=)', 2)
                
                // this is a data entry, presumably including json values
                codeMap += [(member[0]): slurper.parseText(member[1])]
                
                // we successfully processed this entry, so don't do it again
                return
            }
            
            // after any special cases (above), parse what is left
            member = it.split("=")
            if(member.size() == 2)
            {
                // this is a typical entry
                codeMap += [(member[0]): member[1]]
            }
        }
        catch(Exception e)
        {
            log.error "processCodeMessage() error: ${e}\r\nline contents: ${it}"
        }
    }
    
    logDebug(codeMap)
    switch(codeMap?.Code)
    {
        case "_DoTalkAction_":
            handleDoorBellPress(codeMap)
            break
        
        //case "AlarmLocal":
        case "VideoMotion":
            handleSimpleMotion(codeMap)
            break
        
        case "CrossRegionDetection":
            handleCrossRegion(codeMap)
            break
        
        case "CrossLineDetection":
            handleCrossLine(codeMap)
            break
    }
    
    return codeMap
}

def handleDoorBellPress(codeMap)
{
    def devDetails =
        [
            alias: "button",
            devType: "doorbell",
            childType: "Generic Component Button Controller"
        ]
    
    if(codeMap.data?.Action == "Invite")
    {
        logDebug("Doorbell button pressed")
        getChild(devDetails)?.push(1)
    }
}

def componentPush(ch, button = 1)
{
    ch.sendEvent(name: "pushed", value: 1, isStateChange: true)    
}

def handleSimpleMotion(codeMap)
{
    logDebug("Motion status: ${codeMap.action}")
    sendEvent(name: "motion", value: (codeMap.action == "Start") ? "active" : "inactive")
}

def handleCrossRegion(codeMap)
{
    def typeName = "waiting"
    def regionName = "waiting"
    if(codeMap.action == "Start")
    {
        regionName = codeMap.data?.Name
        logDebug("Cross region detected: ${regionName}")
                 
        typeName = codeMap.data?.Object?.ObjectType
        logDebug("Object detected: ${typeName}")
    }
    sendEvent(name: "crossRegionDetected", value: regionName)
    sendEvent(name: "smartDetectType", value: typeName)
}

def handleCrossLine(codeMap)
{
    def lineName = "waiting"
    if(codeMap.action == "Start")
    {
        lineName = codeMap.data?.Name
        logDebug("Cross line detected: ${lineName}")
    }
    sendEvent(name: "crossLineDetected", value: lineName)
    
}

def getChild(Map devDetails)
{
    if(!devDetails) { return }
    
    // devDetails definition:
    //  alias      = "friendly" name of device to append to main device name from Amcrest
    //  devType    = type of device, like doorbell
    //  childType  = driver name for child
    //  childNS    = namespace for driver, or null for "hubitat"
    
    def childDni = device.getDeviceNetworkId() + "-${devDetails.devType}"
    
    def devLabel = device.getName() + " ${devDetails.alias}"    
    def props = 
        [
            name: devLabel,
            label: devLabel,
            isComponent: false
        ]
    
    def ch = getChildDevice(childDni) ?: addChildDevice(devDetails.childNS ?: "hubitat", devDetails.childType, childDni, props)
    
    if(ch)
    {
        ch.setLabel(devLabel)
        ch.setName(devLabel)
    }
    
    return ch
}

def genBaseUri()
{
    return "http://" + ipAddress + ":" + port + "/cgi-bin"
}

def genAuthUri()
{
    return "http://${username}:${password}@" + ipAddress + ":" + port + "/cgi-bin"
}

def fixupUrl(url)
{
    return url.replace('[', "%5B").replace(']', "%5D")    
}

def genParamsHeaders(suffix)
{
    suffix = fixupUrl(suffix)
    
    def auth = genAuthDigest(suffix)
    if(!auth) { return }
    
    return [headers: [Authorization: auth]]
}

def genParamsFull(suffix, withAuth = true)
{
    suffix = fixupUrl(suffix)
    def targetUri = (withAuth ? genAuthUri() : genBaseUri()) + suffix
    
    def params = [uri: targetUri]
    
    return params
}

def parseAuthHeader(authHeader)
{
    def authMap = [:]
    
    if(authHeader?.toLowerCase()?.contains("digest"))
    {
        authHeader = authHeader.replace("Digest ", "")
        authHeader = authHeader?.split(", ")

        authHeader?.each
        {
            it = it.split('=')
            if(it?.size() == 2)
            {
                authMap += [(it[0]): it[1].replaceAll('"', '')]
            }
        }
    }
    
    authMap.nc = 1    
    authMap.cnonce = java.util.UUID.randomUUID().toString().replaceAll('-', '').substring(0, 8)
    
    return authMap
}

def genAuthDigest(suffix)
{
    def authMap = getAuthMap()
    
    if([authMap?.realm, authMap?.nonce, authMap?.qop, authMap?.nc, authMap?.cnonce, username, password, suffix].contains(null))
    {
        return
    }

    authMap.cnonce = java.util.UUID.randomUUID().toString().replaceAll('-', '').substring(0, 8)
    
    def ha1Raw
    switch(authMap.algorithm)
    {
        case "MD5-sess":
            ha1Raw = md5([username, authMap.realm, password].join(":"))
            ha1Raw = [ha1Raw, authMap.nonce, authMap.cnonce].join(":")
            break
        
        case "MD5":
        default:
            ha1Raw = [username, authMap.realm, password].join(":")
            break
    }
    
    //logDebug("ha1 = ${ha1Raw}")
    def HA1 = md5(ha1Raw)
    
    def ha2Raw
    switch(authMap.qop)
    {
        case "auth-int":
            // TODO: figure out entity-body; this will not work as written
            ha2Raw = ["GET", suffix, md5(entity-body)].join(":")
        
        case "auth":
        default:
            ha2Raw = ["GET", suffix].join(":")
            break
    }
    
    //logDebug("ha2 = ${ha2Raw}")
    def HA2 = md5(ha2Raw)
    
    def respRaw
    switch(authMap.qop)
    {
        case "auth":
        case "auth-init":
            respRaw = [HA1, authMap.nonce, authMap.nc, authMap.cnonce, authMap.qop, HA2].join(":")
            break
        
        default:
            respRaw = [HA1, authMap.nonceHA2].join(":")
    }
    
    //logDebug("respRaw = ${respRaw}")
    def response = md5(respRaw)
    
    def digestMap =
        [
            username: username,
            realm: authMap.realm,
            nc: authMap.nc,
            cnonce: authMap.cnonce,
            qop: authMap.qop,
            nonce: authMap.nonce,
            opaque: authMap.opaque,
            uri: suffix
        ]
    
    // need to update nonce-count for next time
    def nc = authMap.nc
    authMap.nc = ++nc
    setAuthMap(authMap)
    
    def resp    
    digestMap.each
    {
        resp = addDigestMember(resp, it.key, it.value)        
    }
    
    return addDigestMember(resp, "response", response, true)
}

def addDigestMember(digest, name, value, last = false)
{
    if(null == digest)
    {
        digest = "Digest "
    }
    
    def eol = !last ? '", ' : '"'
    def newTerm = "${name}=\"" + value + eol
    
    if(["nc", "qop"].contains(name)) { newTerm = newTerm.replaceAll('"', '') }
    digest += newTerm
    
    return digest
}

def httpExec(operation, params)
{    
    def result = null
    
    //logDebug("httpExec(${operation}, ${params})")
    
    def httpClosure = 
    { resp ->
        result = resp
        //logDebug("result.data = ${result.data}")
    }
    
    def httpOp
    
    switch(operation)
    {
        case "POST":
            httpOp = this.delegate.&httpPost
            break
        case "GET":
            httpOp = this.delegate.&httpGet
            break
    }
    
    httpOp(params, httpClosure)
    return result
}

//////////////////////////////////////
// volatile state
//////////////////////////////////////

import groovy.transform.Field
@Field static volatileState = [:].asSynchronized()

def vsUid()
{
    return device?.getDeviceNetworkId() ?: app.getId()
}

def setVolatileState(name, value)
{
    def tempState = volatileState[vsUid()] ?: [:]
    tempState.putAt(name, value)
    
    volatileState.putAt(vsUid(), tempState)
    
    return volatileState
}

def getVolatileState(name)
{
    return volatileState.getAt(vsUid())?.getAt(name)
}


//////////////////////////////////////
// EventSocket handling
//////////////////////////////////////


def reinitialize()
{
    unschedule(initialize)
    
    // thanks ogiewon for the example
    
    // first delay is 2 seconds, doubles every time
    def delayCalc = (state.reconnectDelay ?: 1) * 2    
    // upper limit is 600s
    def reconnectDelay = delayCalc <= 600 ? delayCalc : 600
    
    state.reconnectDelay = reconnectDelay
    runIn(reconnectDelay, initialize)
}

def eventStreamStatus(String message)
{
    logDebug("eventStreamStatus: ${message}")
    
    // thanks for the idea: https://community.hubitat.com/t/websocket-client/11843/15
    if(message?.toLowerCase()?.contains("start"))
    {
        state.reconnectDelay = 1
        setWasExpectedClose(false)
        
        return
    }
    
    def regex = '(STOP|ERROR)'
    if(message?.find(regex))
    {
        if(getWasExpectedClose())
        {
            setWasExpectedClose(false)
            return
        }
 
        reinitialize()        
        return
    }
}

def setWasExpectedClose(wasExpected)
{
    //state.wasExpectedClose = wasExpected
    setVolatileState("wasExpectedClose", wasExpected)
}

def getWasExpectedClose()
{
    //def wec = state.wasExpectedClose
    def wec = getVolatileState("wasExpectedClose")
    return (null != wec) ? wec : true
}

def closeStream()
{
    try
    {
        setWasExpectedClose(true)
        
        interfaces.eventStream.close()
    }
    catch (Exception e)
    {
        // swallow errors
    }
}


//////////////////////////////////////
// Random helpers and completion
//////////////////////////////////////


def strReaderToString(reader)
{
    if(null == reader) { return }
    
    // https://stackoverflow.com/a/17751100
    java.lang.StringBuilder builder = new java.lang.StringBuilder()
    
    // non-zero value so we read at least once
    int charsRead = 1
    char[] chars = new char[1024]
    
    while(charsRead > 0)
    {
        charsRead = reader.read(chars, 0, chars.length)
        if(charsRead>0) { builder.append(chars, 0, charsRead) }
    }
    
    def str = builder.toString()
    
    return str
}

String md5(String strToSign)
{
    if(null == strToSign) { return }
    
    try
    {
        java.security.MessageDigest digest = java.security.MessageDigest.getInstance("MD5")
        def md5_bytes = digest.digest(strToSign.getBytes("UTF-8"))
        
        return hubitat.helper.HexUtils.byteArrayToHexString(md5_bytes)?.toLowerCase()
    }
    catch(Exception e)
    {
        log.error "md5(${strToSign}) failed: ${e}"
    }
}

def componentDoubleTap(ch, button = 1)
{
    //no_op 
}

def componentHold(ch, button = 1)
{
    //no_op 
}

def componentRelease(ch, button = 1)
{
    //no_op 
}
